{"version":3,"sources":["views/CustomerForm/CustomerForm.tsx","generated/graphql.tsx","views/CustomerForm/index.tsx","views/Customers/Customers.tsx","views/Customers/index.tsx"],"names":["CustomerForm","props","isOpen","customer","onSaveCustomer","onCancel","cPhone","cName","cEmail","cAddress","cId","phone","name","email","address","id","_useState","useState","_useState2","Object","slicedToArray","setPhone","_useState3","_useState4","setName","_useState5","_useState6","setEmail","_useState7","_useState8","setAddress","_useState9","Date","_useState10","dateOfBirth","setDateOfBirth","react_default","a","createElement","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","placeholder","value","onChange","event","target","es","className","selected","date","dateFormat","placeholderText","ModalFooter","Button","color","onClick","variables","defaultProps","isEdit","loading","error","CreateCustomerDocument","gql","_templateObject","GetCustomerByIdDocument","_templateObject2","GetCustomersDocument","_templateObject3","CustomerForm_templateObject","CustomerForm_templateObject2","AddOrUpdateCustomer","_ref","baseOptions","_useCreateCustomerMut","ApolloReactHooks","_useCreateCustomerMut2","createCustomer","_useCreateCustomerMut3","CustomerForm_CustomerForm","UpdateCutsomer","_ref2","customerId","_useGetCustomerByIdQu","data","undefined","CustomerForm_AddOrUpdateCustomer","views_CustomerForm","_ref3","CustomerForm_UpdateCutsomer","CustomerListItem","onEdit","size","title","Customers","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedCustomerId","handleEditCustomer","bind","assertThisInitialized","hideEditCustomerForm","setState","_this2","customers","Row","Col","xs","lg","Card","CardHeader","CardBody","Table","responsive","striped","map","key","Pagination","PaginationItem","disabled","PaginationLink","previous","tag","active","next","Component","Customers_templateObject","__webpack_exports__","_useGetCustomersQuery","views_Customers_Customers"],"mappings":"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","file":"static/js/12.782a5a1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nfunction CustomerForm(props) {\n  const { isOpen, customer, onSaveCustomer, onCancel } = props;\n  let cPhone = \"\";\n  let cName = \"\";\n  let cEmail = \"\";\n  let cAddress = \"\";\n  let cId = null;\n\n  if (customer) {\n    cPhone = customer.phone;\n    cName = customer.name;\n    cEmail = customer.email;\n    cAddress = customer.address;\n    cId = customer.id;\n  }\n\n  const [phone, setPhone] = useState(cPhone);\n  const [name, setName] = useState(cName);\n  const [email, setEmail] = useState(cEmail);\n  const [address, setAddress] = useState(cAddress);\n  const [dateOfBirth, setDateOfBirth] = useState(new Date());\n  return (\n    <Modal isOpen={isOpen}>\n      <ModalHeader>Update Customer Details</ModalHeader>\n      <ModalBody>\n        <Form>\n          <FormGroup>\n            <Label for=\"phone\">Phone number</Label>\n            <Input\n              type=\"text\"\n              name=\"phone\"\n              id=\"phone\"\n              placeholder=\"Customer Phone number\"\n              value={phone}\n              onChange={event => setPhone(event.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"name\">Name</Label>\n            <Input\n              type=\"text\"\n              name=\"name\"\n              id=\"name\"\n              placeholder=\"Customer name\"\n              value={name}\n              onChange={event => setName(event.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"email\">Email</Label>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Customer Email\"\n              value={email}\n              onChange={event => setEmail(event.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"dob\">Date of Birth</Label>\n            <DatePicker\n              className=\"form-control\"\n              name=\"dob\"\n              selected={dateOfBirth}\n              onChange={date => setDateOfBirth(date)}\n              dateFormat=\"dd/MM/yyyy\"\n              placeholderText=\"DD/MM/YYYY\"\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input\n              type=\"textarea\"\n              name=\"address\"\n              id=\"address\"\n              placeholder=\"Customer Address\"\n              value={address}\n              onChange={event => setAddress(event.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          color=\"primary\"\n          onClick={() =>\n            onSaveCustomer({\n              variables: {\n                customer: {\n                  id: cId,\n                  name,\n                  email,\n                  phone,\n                  address,\n                  dateOfBirth: dateOfBirth\n                }\n              }\n            })\n          }\n        >\n          Save\n        </Button>{\" \"}\n        <Button color=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\nCustomerForm.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  customer: PropTypes.object,\n  onSaveCustomer: PropTypes.func.isRequired,\n  isEdit: PropTypes.bool,\n  onCancel: PropTypes.func.isRequired,\n  loading: PropTypes.bool,\n  error: PropTypes.object\n};\n\nCustomerForm.defaultProps = {\n  customer: null,\n  isEdit: false,\n  loading: false,\n  error: null\n};\nexport default CustomerForm;\n","import gql from \"graphql-tag\";\nimport * as ApolloReactCommon from \"@apollo/react-common\";\nimport * as ApolloReactHooks from \"@apollo/react-hooks\";\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Customer = {\n  __typename?: \"Customer\";\n  id?: Maybe<Scalars[\"String\"]>;\n  name: Scalars[\"String\"];\n  address: Scalars[\"String\"];\n  email?: Maybe<Scalars[\"String\"]>;\n  phone: Scalars[\"String\"];\n  dateOfBirth?: Maybe<Scalars[\"DateTime\"]>;\n  profilePic?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type CustomerInput = {\n  id?: Maybe<Scalars[\"String\"]>;\n  name: Scalars[\"String\"];\n  address: Scalars[\"String\"];\n  email?: Maybe<Scalars[\"String\"]>;\n  phone?: Maybe<Scalars[\"String\"]>;\n  dateOfBirth?: Maybe<Scalars[\"DateTime\"]>;\n  profilePic?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  createCustomer: Customer;\n};\n\nexport type MutationCreateCustomerArgs = {\n  customer: CustomerInput;\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  customer?: Maybe<Customer>;\n  customers: Array<Customer>;\n};\n\nexport type QueryCustomerArgs = {\n  customerId: Scalars[\"String\"];\n};\nexport type CreateCustomerMutationVariables = {\n  customer: CustomerInput;\n};\n\nexport type CreateCustomerMutation = { __typename?: \"Mutation\" } & {\n  createCustomer: { __typename?: \"Customer\" } & Pick<\n    Customer,\n    \"id\" | \"name\" | \"phone\" | \"email\" | \"address\"\n  >;\n};\n\nexport type GetCustomerByIdQueryVariables = {\n  id: Scalars[\"String\"];\n};\n\nexport type GetCustomerByIdQuery = { __typename?: \"Query\" } & {\n  customer: Maybe<\n    { __typename?: \"Customer\" } & Pick<\n      Customer,\n      \"id\" | \"name\" | \"phone\" | \"email\" | \"address\"\n    >\n  >;\n};\n\nexport type GetCustomersQueryVariables = {};\n\nexport type GetCustomersQuery = { __typename?: \"Query\" } & {\n  customers: Array<\n    { __typename?: \"Customer\" } & Pick<\n      Customer,\n      \"id\" | \"name\" | \"phone\" | \"email\" | \"address\"\n    >\n  >;\n};\n\nexport const CreateCustomerDocument = gql`\n  mutation createCustomer($customer: CustomerInput!) {\n    createCustomer(customer: $customer) {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\nexport type CreateCustomerMutationFn = ApolloReactCommon.MutationFunction<\n  CreateCustomerMutation,\n  CreateCustomerMutationVariables\n>;\n\nexport function useCreateCustomerMutation(\n  baseOptions?: ApolloReactHooks.MutationHookOptions<\n    CreateCustomerMutation,\n    CreateCustomerMutationVariables\n  >\n) {\n  return ApolloReactHooks.useMutation<\n    CreateCustomerMutation,\n    CreateCustomerMutationVariables\n  >(CreateCustomerDocument, baseOptions);\n}\nexport type CreateCustomerMutationHookResult = ReturnType<\n  typeof useCreateCustomerMutation\n>;\nexport type CreateCustomerMutationResult = ApolloReactCommon.MutationResult<\n  CreateCustomerMutation\n>;\nexport type CreateCustomerMutationOptions = ApolloReactCommon.BaseMutationOptions<\n  CreateCustomerMutation,\n  CreateCustomerMutationVariables\n>;\nexport const GetCustomerByIdDocument = gql`\n  query getCustomerById($id: String!) {\n    customer(customerId: $id) {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\n\nexport function useGetCustomerByIdQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetCustomerByIdQuery,\n    GetCustomerByIdQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetCustomerByIdQuery,\n    GetCustomerByIdQueryVariables\n  >(GetCustomerByIdDocument, baseOptions);\n}\nexport type GetCustomerByIdQueryHookResult = ReturnType<\n  typeof useGetCustomerByIdQuery\n>;\nexport type GetCustomerByIdQueryResult = ApolloReactCommon.QueryResult<\n  GetCustomerByIdQuery,\n  GetCustomerByIdQueryVariables\n>;\nexport const GetCustomersDocument = gql`\n  query getCustomers {\n    customers {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\n\nexport function useGetCustomersQuery(\n  baseOptions?: ApolloReactHooks.QueryHookOptions<\n    GetCustomersQuery,\n    GetCustomersQueryVariables\n  >\n) {\n  return ApolloReactHooks.useQuery<\n    GetCustomersQuery,\n    GetCustomersQueryVariables\n  >(GetCustomersDocument, baseOptions);\n}\nexport type GetCustomersQueryHookResult = ReturnType<\n  typeof useGetCustomersQuery\n>;\nexport type GetCustomersQueryResult = ApolloReactCommon.QueryResult<\n  GetCustomersQuery,\n  GetCustomersQueryVariables\n>;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport gql from \"graphql-tag\";\nimport CustomerForm from \"./CustomerForm\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport {\n  useCreateCustomerMutation,\n  useGetCustomerByIdQuery,\n  GetCustomerByIdQueryResult,\n  GetCustomerByIdQuery,\n  Customer\n} from \"../../generated/graphql\";\n\nconst CREATE_CUSTOMER = gql`\n  mutation createCustomer($customer: CustomerInput!) {\n    createCustomer(customer: $customer) {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\n\nconst GET_CUSTOMER = gql`\n  query getCustomerById($id: String!) {\n    customer(customerId: $id) {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\nconst AddOrUpdateCustomer = ({\n  customer,\n  isOpen,\n  isEdit,\n  onCancel\n}: {\n  customer?: Customer;\n  isOpen: boolean;\n  isEdit: boolean;\n  onCancel: any;\n}) => {\n  const [createCustomer, { error, loading }] = useCreateCustomerMutation();\n  return (\n    <CustomerForm\n      customer={customer}\n      isOpen={isOpen}\n      isEdit={isEdit}\n      onSaveCustomer={createCustomer}\n      onCancel={onCancel}\n      loading={loading}\n      error={error}\n    />\n  );\n};\nconst UpdateCutsomer = ({\n  onCancel,\n  isOpen,\n  customerId\n}: {\n  onCancel: any;\n  isOpen: boolean;\n  customerId: string;\n}) => {\n  const { loading, error, data } = useGetCustomerByIdQuery({\n    variables: { id: customerId }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  const customer =\n    data && data.customer ? (data.customer as Customer) : undefined;\n  return (\n    <AddOrUpdateCustomer\n      customer={customer}\n      isEdit={true}\n      isOpen={isOpen}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default ({\n  onCancel,\n  isOpen,\n  customerId\n}: {\n  onCancel: any;\n  isOpen: boolean;\n  customerId?: string;\n}) => {\n  if (customerId) {\n    return (\n      <UpdateCutsomer\n        customerId={customerId}\n        isOpen={isOpen}\n        onCancel={onCancel}\n      />\n    );\n  }\n  return (\n    <AddOrUpdateCustomer isEdit={false} isOpen={isOpen} onCancel={onCancel} />\n  );\n};\n","import React, { Component } from \"react\";\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  Col,\n  Pagination,\n  PaginationItem,\n  PaginationLink,\n  Row,\n  Table,\n  Button\n} from \"reactstrap\";\nimport CustomerForm from \"../CustomerForm\";\n\nfunction CustomerListItem(props) {\n  const { customer, onEdit } = props;\n  return (\n    <tr>\n      <td>{customer.name}</td>\n      <td>{customer.phone}</td>\n      <td>{customer.email}</td>\n      <td>{customer.address}</td>\n      <td>\n        <Button\n          size=\"sm\"\n          color=\"primary\"\n          title=\"Edit Customer Details\"\n          onClick={() => onEdit(customer.id)}\n        >\n          <i className=\"fa fa-edit\" />\n        </Button>{\" \"}\n        <Button size=\"sm\" color=\"danger\" title=\"Delete Customer\">\n          <i className=\"fa fa-trash\" />\n        </Button>\n      </td>\n    </tr>\n  );\n}\n\nclass Customers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedCustomerId: null\n    };\n    this.handleEditCustomer = this.handleEditCustomer.bind(this);\n    this.hideEditCustomerForm = this.hideEditCustomerForm.bind(this);\n  }\n\n  handleEditCustomer(id) {\n    this.setState({\n      selectedCustomerId: id\n    });\n  }\n\n  hideEditCustomerForm(){\n    this.setState({\n      selectedCustomerId: null\n    });\n  }\n  render() {\n    const { customers } = this.props;\n    const { selectedCustomerId } = this.state;\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col xs=\"12\" lg=\"12\">\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-users\" />\n                Customers\n                <Button color=\"primary\" className=\"float-right\" title=\"Add Customer Details\"><i className=\"fa fa-user-plus\" /></Button>\n              </CardHeader>\n              <CardBody>\n                <Table responsive striped>\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Phone</th>\n                      <th>Email</th>\n                      <th>Address</th>\n                      <th>Manage</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {customers.map(customer => (\n                      <CustomerListItem\n                        customer={customer}\n                        key={customer.id}\n                        onEdit={this.handleEditCustomer}\n                      />\n                    ))}\n                  </tbody>\n                </Table>\n                <CustomerForm isOpen={selectedCustomerId ? true : false} customerId={selectedCustomerId} onCancel={this.hideEditCustomerForm}/>\n                <Pagination>\n                  <PaginationItem disabled>\n                    <PaginationLink previous tag=\"button\">\n                      Prev\n                    </PaginationLink>\n                  </PaginationItem>\n                  <PaginationItem active>\n                    <PaginationLink tag=\"button\">1</PaginationLink>\n                  </PaginationItem>\n                  <PaginationItem>\n                    <PaginationLink tag=\"button\">2</PaginationLink>\n                  </PaginationItem>\n                  <PaginationItem>\n                    <PaginationLink tag=\"button\">3</PaginationLink>\n                  </PaginationItem>\n                  <PaginationItem>\n                    <PaginationLink tag=\"button\">4</PaginationLink>\n                  </PaginationItem>\n                  <PaginationItem>\n                    <PaginationLink next tag=\"button\">\n                      Next\n                    </PaginationLink>\n                  </PaginationItem>\n                </Pagination>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Customers;\n","import React from \"react\";\nimport gql from \"graphql-tag\";\nimport Customers from \"./Customers\";\nimport { useGetCustomersQuery } from \"../../generated/graphql\";\n\nconst GET_CUSTOMERS = gql`\n  query getCustomers{\n    customers {\n      id\n      name\n      phone\n      email\n      address\n    }\n  }\n`;\n\nexport default () => {\n  const {loading, error, data }  = useGetCustomersQuery()\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n    const customers = (data && data.customers)?data.customers:[]\n  return <Customers customers={customers}/>;\n}\n\n"],"sourceRoot":""}